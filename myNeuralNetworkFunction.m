function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 16-Nov-2021 09:36:13.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx2 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-105.973273942794;2.70822397437365e-05;-15.6120517141547;-30.4514760198518];
x1_step1.gain = [0.00952364936783987;0.00788543272004125;0.0623024030067267;0.0495268847224936];
x1_step1.ymin = -1;

% Layer 1
b1 = [-16.454624316048221289;18.371496230599969834;14.160225075670906492;-0.0026176828721251035534;2.3222934817529958806;-1.8000691281292715562;-1.3656519588577888946;-2.1928164358467632233;1.6154969478847607256;1.1345542536461090677;-2.6736607087532844318;3.541144773323303685;-1.0139018919070410529;-1.8880800085559052981;1.3741546956044436989;0.022354453005861599224;-24.041631564019830591;-1.8562991575990879234;27.856532100038741362;-10.268882258924044493];
IW1_1 = [3.6469414269702999931 -15.107830882292780927 0.71726133475208952994 1.6921632674672302254;-14.011079091217368386 15.067604118944755598 -0.0041685002150274857308 -6.005295259845413014;6.9081815505076811235 12.895991434631003614 0.58614654511640063017 1.1129063039860789264;0.33239298894030833154 0.053950500063857390054 0.55338862392121124234 -0.014891502821197562245;-0.3983944585930512261 2.6919744077902532098 0.21043172808927043671 0.062277795022736469333;1.2997719293136948959 -0.16412190049091879285 -0.67591698265756261499 -0.28033403840149273556;1.0635715898897197818 -0.98537850326202036655 -0.18508808156130629463 -0.17038657443380958445;2.1027908285636573993 -1.1704319382733650023 0.095108087987166717303 -0.077666462241517297826;-1.1962284311036082141 0.43326844035319361792 0.5011869402531512474 0.23980526584030956161;-0.73640588571342036062 1.2302373278393827771 0.13657715915044771338 0.14391718893079613606;-2.6836440744416392157 -3.6939302231653887709 -0.62531837476913076923 -0.16026153195258227568;1.2535073621655870024 2.4412174805395245869 0.22714680382313481855 0.56966971196712001824;0.61597284400977392327 -0.017744491731797859546 0.41342937770245841156 -0.46298965269202119188;0.76477341005215282443 -1.1930289736507508902 0.084023170105196248736 -0.13879010472519659469;0.33009881874247615219 0.54365777471428589074 0.19739690282053906634 0.345070570809375754;0.32686847529825036052 0.0051603748608126083844 0.53618776110547983205 0.044061931641129238602;0.28417113983982777992 -22.026383133448746321 -1.0475926167990077253 3.0600133764578441031;1.5772669095128293293 -1.1163443501736591834 0.059325815140952073423 -0.11971317849727930449;10.439063270334948186 24.517786320555206458 0.2526723520079107721 -6.8118562324059315216;-5.073619050131837227 -8.0071025124719668042 -0.66563865401938915323 3.7674938013838654705];

% Layer 2
b2 = [-4.7114941922073763081;19.03688305640866929];
LW2_1 = [-5.1857714756888828589 29.93126602630723454 -4.3590700444655432477 -0.11173593911513061971 -1.8492272050877225364 -4.0834086876166386659 -21.889929650505798975 -7.8670978370500534993 -9.7645661013042257537 -12.799370877206248664 -0.29892481881166443891 -8.8600021221563434182 -0.58378264397211565573 -32.041063249398241908 -2.7350015328901680078 -0.83921701391537228965 4.107574395306769155 22.615310735006417531 -16.488235461808883997 13.56195043718864035;7.1866075845608055062 7.1300817131159197615 -8.3201604025074544779 3.4424751975242209312 0.56018518490990232284 -0.11893750984540114868 2.5844770927290250384 -0.91783356587173525742 0.20613622557930541546 3.2119315774394538998 -0.099347083115064988013 -5.5013111713456908092 0.34112086818859826964 6.780599904227565311 -3.2339858529337783821 -3.5762057764229946422 25.037955747287870878 0.43592285613978892789 -9.3878715390512805783 -36.569211728999988509];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.12006197180188;0.0956523022706639];
y1_step1.xoffset = [-7.95102576194981;-1.66600623656385];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
